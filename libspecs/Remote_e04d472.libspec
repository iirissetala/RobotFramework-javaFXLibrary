<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20200227 10:11:12" type="library" name="Remote" format="ROBOT">
<version></version>
<scope>test suite</scope>
<namedargs>yes</namedargs>
<doc>IOException occured while reading the documentation file!</doc>
<init>
<arguments>
<arg>uri=http://127.0.0.1:8270</arg>
<arg>timeout=None</arg>
</arguments>
<doc>IOException occured while reading the init documentation file!</doc>
<tags>
</tags>
</init>
<kw name="Bounds Should Be Equal">
<arguments>
<arg>firstBounds</arg>
<arg>secondBounds</arg>
</arguments>
<doc>Checks if given two bounds are equal. 

``firstBounds`` is an _Object:Bounds_ that specifies the first comparable Bounds

``secondBounds`` is an _Object:Bounds_ that specifies the second comparable Bounds, see `3.2 Using objects`</doc>
<tags>
</tags>
</kw>
<kw name="Bring Stage To Front">
<arguments>
<arg>stage</arg>
</arguments>
<doc>Brings the given stage to front

``stage`` is an Object:Stage to be set in front of others`, see `3.2 Using objects`.</doc>
<tags>
</tags>
</kw>
<kw name="Call Object Method">
<arguments>
<arg>object</arg>
<arg>method</arg>
<arg>*arguments=</arg>
</arguments>
<doc>Calls a given method for a given java object.

``object`` is a Java object retrieved using JavaFXLibrary keywords, see `3.2 Using objects`.

``method`` is the name of the method that will be called.

Optional ``arguments`` are variable-length arguments that will be provided for the method.
 If argument type is boolean, byte, char, double, float, int, long or short, it must have "casting instructions" in front of it, e.g. _"(boolean)false"_.


Example:
| ${node}= | Find | \#node-id | 
| ${max height}= | Call Object Method | ${node} | maxHeight | (double)10 | 
| ${node text}= | Call Object Method | ${node} | getText |</doc>
<tags>
</tags>
</kw>
<kw name="Call Object Method In Fx Application Thread">
<arguments>
<arg>object</arg>
<arg>method</arg>
<arg>*arguments=</arg>
</arguments>
<doc>Calls given method in FX Application Thread using Platform.runLater(). See `Call Object Method` for further documentation.


Example:
| ${node}= | Find | \#node-id | 
| Call Object Method In Fx Application Thread | ${node} | maxHeight | (boolean)false |</doc>
<tags>
</tags>
</kw>
<kw name="Capture Image">
<arguments>
<arg>locator=target window</arg>
<arg>logImage=True</arg>
</arguments>
<doc>Returns a screenshot of the given locator, or if not given from whole active window.

Note that active window might only be part of the visible window, it e.g. dialog is active.

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, Rectangle, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

Argument ``logImage`` is a boolean value that specifies whether a captured image is also printed to test execution log. 

 
Example:
| ${region}= | Create Rectangle | 11 | 22 | 33 | 44 | 
| ${capture}= | Capture Image | ${region} | 
| ${capture}= | Capture Image | ${node} | 
| ${capture}= | Capture Image | ${window} | 
| ${capture}= | Capture Image | | 
| ${capture}= | Capture Image | \#id | logImage=False |</doc>
<tags>
</tags>
</kw>
<kw name="Capture Primary Screen">
<arguments>
</arguments>
<doc>Returns a screenshot from whole primary screen. Note that this shows also other applications that are open.</doc>
<tags>
</tags>
</kw>
<kw name="Capture Scene Containing Node">
<arguments>
<arg>locator</arg>
<arg>logImage=True</arg>
</arguments>
<doc>Returns a screenshot of the scene conatining given locator.

``locator`` is a query locator, see `3.1 Using queries`.

 
Example:
| ${capture}= | Capture Scene Containing Node | ${node} |</doc>
<tags>
</tags>
</kw>
<kw name="Clear Object Map">
<arguments>
</arguments>
<doc>Clears internal book keeping of all java objects.</doc>
<tags>
</tags>
</kw>
<kw name="Clear Text Input">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Clears the text value of given TextInputControl

``locator`` is either a _query_ or _TextInputControl_ object. For identifying the element, see `3. Locating or specifying UI elements`. 


Example:
| Clear Text Input | .text-field |</doc>
<tags>
</tags>
</kw>
<kw name="Click On">
<arguments>
<arg>locator</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Clicks an element specified by given locator.

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

``motion`` defines the path for mouse to move to a target location. Default value is _DIRECT_. Especially with submenus, desired motion is usually HORIZONTAL_FIRST.


Example:
| Click On | ${node} | 
| Click On | ${point} | 
| Click On | \#node-id | 
| Click On | .css-name | Motion=VERTICAL_FIRST |</doc>
<tags>
</tags>
</kw>
<kw name="Click On Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Moves mouse directly to the given coordinates and clicks the primary mouse button

``x`` and ``y`` defines the coordinates as integer values. 

Optional argument ``motion`` defines how mouse pointer is moved to target. Defaults to _DIRECT_.</doc>
<tags>
</tags>
</kw>
<kw name="Click On Mouse Button">
<arguments>
<arg>*buttons</arg>
</arguments>
<doc>Clicks whatever is under the mouse pointer. 

``buttons`` is a list of mouse buttons to click. See `5. Used ENUMs` for different mouse buttons available.</doc>
<tags>
</tags>
</kw>
<kw name="Close Current Window">
<arguments>
</arguments>
<doc>Closes the current window, same as ALT + F4 in Windows</doc>
<tags>
</tags>
</kw>
<kw name="Close Javafx Application">
<arguments>
</arguments>
<doc>Closes JavaFX application.

Example:
| Close JavaFX Application |</doc>
<tags>
</tags>
</kw>
<kw name="Close Swing Application">
<arguments>
</arguments>
<doc>Closes Wrapped Swing application.

Example:
| Close Swing Application |</doc>
<tags>
</tags>
</kw>
<kw name="Create Bounds">
<arguments>
<arg>minX</arg>
<arg>minY</arg>
<arg>width</arg>
<arg>height</arg>
</arguments>
<doc>Creates a new Bounds object with the given parameters

``minX``, ``minY``, ``width``, ``height`` are Double type arguments.


Example:
| ${target bounds}= | Create Bounds | 150 | 150 | 0 | 0 | 
| ${capture}= | Capture Bounds | ${target bounds} |
See more at: https://docs.oracle.com/javase/8/javafx/api/javafx/geometry/Bounds.html</doc>
<tags>
</tags>
</kw>
<kw name="Create Point">
<arguments>
<arg>x</arg>
<arg>y</arg>
</arguments>
<doc>Creates a new Point2D object with the given parameters

``x`` and ``y`` are both Double type arguments.


Example:
| ${point}= | Create Point | 150 | 150 | 
| Drop To | ${point} | 
See more at: https://docs.oracle.com/javase/8/javafx/api/javafx/geometry/Point2D.html</doc>
<tags>
</tags>
</kw>
<kw name="Create Rectangle">
<arguments>
<arg>minX</arg>
<arg>minY</arg>
<arg>width</arg>
<arg>height</arg>
</arguments>
<doc>Creates a new Rectangle2D object with the given parameters

``minX``, ``minY``, ``width``, ``height`` are Double type arguments.


Example:
| ${rectangle} | Create Rectangle | ${minX} | ${minY} | 240 | 240 | 
| ${image1} | Capture Screen Region | ${rectangle} | 

See more at: https://docs.oracle.com/javase/8/javafx/api/javafx/geometry/Rectangle2D.html</doc>
<tags>
</tags>
</kw>
<kw name="Current Application">
<arguments>
</arguments>
<doc>Returns the class name of currently active JavaFX Application</doc>
<tags>
</tags>
</kw>
<kw name="Double Click On">
<arguments>
<arg>locator</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Double clicks an element specified by given locator.

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

``motion`` defines the path for mouse to move to a target location. Default value is _DIRECT_.</doc>
<tags>
</tags>
</kw>
<kw name="Double Click On Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Moves mouse directly to the given coordinates and double clicks the primary mouse button

``x`` and ``y`` defines the coordinates as integer values. 

Optional argument ``motion`` defines how mouse pointer is moved to target. Defaults to _DIRECT_.</doc>
<tags>
</tags>
</kw>
<kw name="Double Click On Mouse Button">
<arguments>
<arg>*buttons</arg>
</arguments>
<doc>Double clicks whatever is under the mouse pointer. 

``buttons`` is a list of mouse buttons to click. See `5. Used ENUMs` for different mouse buttons available.</doc>
<tags>
</tags>
</kw>
<kw name="Drag">
<arguments>
<arg>*buttons</arg>
</arguments>
<doc>Presses the given mouse button(s) on whatever is under the mouse's current location. 

Optional parameter ``buttons`` is a list of mouse buttons to be used, defaults to PRIMARY. See `5. Used ENUMs` for different MouseButtons</doc>
<tags>
</tags>
</kw>
<kw name="Drag From">
<arguments>
<arg>locator</arg>
<arg>button=PRIMARY</arg>
</arguments>
<doc>Moves mouse on top of the element located using given _locator_ and presses the given mouse _button_.

 ``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

Optional parameter ``button`` is the mouse button to be used, defaults to PRIMARY. See `5. Used ENUMs` for different MouseButtons


Example:
| ${node}= | Find | \#some-node-id | 
| Drag From | ${node} | SECONDARY |</doc>
<tags>
</tags>
</kw>
<kw name="Drag From Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>*buttons</arg>
</arguments>
<doc>Moves the mouse to given coordinates _x_ and _y_ and presses the given mouse _buttons_

Integer argument ``x`` sets the source point for x -coordinate

Integer argument ``y`` sets the source point for y -coordinate

Optional parameter ``buttons`` is a list of mouse buttons to be used, defaults to PRIMARY. See `5. Used ENUMs` for different MouseButtons


Example:
| ${window}= | Get Window | title=Window Title | 
| Drag From Coordinates | ${x} | ${y} | 
| Drop To | ${window} |</doc>
<tags>
</tags>
</kw>
<kw name="Drop">
<arguments>
</arguments>
<doc>Releases the mouse at current position.</doc>
<tags>
</tags>
</kw>
<kw name="Drop By">
<arguments>
<arg>x</arg>
<arg>y</arg>
</arguments>
<doc>Moves the mouse horizontally by _x_ and vertically by _y_ before releasing the mouse.

Integer argument ``x`` is the amount how much to move the mouse horizontally
Integer argument ``y`` is the amount how much to move the mouse vertically.

Example:
| Drag From | \#node-id .css-name | 
| Drop By | -300 | 0 |</doc>
<tags>
</tags>
</kw>
<kw name="Drop To">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Moves mouse on top of the element located using given _locator_ and and releases the mouse button.

 ``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 


Example:
| Drop To | \#some-node-id |</doc>
<tags>
</tags>
</kw>
<kw name="Drop To Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
</arguments>
<doc>Moves the mouse to given coordinates _x_ and _y_ and releases mouse buttons

Integer argument ``x`` sets the target point for x -coordinate

Integer argument ``y`` sets the target point for y -coordinate


Example:
| Drag From | \#node-id | 
| Drop To | 100 | 100 |</doc>
<tags>
</tags>
</kw>
<kw name="Erase Text">
<arguments>
<arg>amount</arg>
</arguments>
<doc>Erases the given number of characters from the active element.

``amount`` is the number of characters to erase

Example:
| Erase Text | 5 |</doc>
<tags>
</tags>
</kw>
<kw name="Find">
<arguments>
<arg>query</arg>
<arg>failIfNotFound=False</arg>
<arg>root=</arg>
</arguments>
<doc>Returns the *first* node matching the query. 

``query`` is a query locator, see `3. Locating JavaFX Nodes`.

``failIfNotFound`` specifies if keyword should fail if nothing is found. By default it's false and keyword returns null in case lookup returns nothing.

``root`` is an optional argument pointing to the element which is used as the origin of the lookup. If root is defined only its children can be found. By default nodes are being looked from everywhere.


Example:
| ${my node}= | Find | some text | | | # finds node containing text _some text_ |
| ${my node}= | Find | .css | | | # finds node with matching style class |
| ${my node}= | Find | \#id | | | # finds node with matching _id_ |
| ${my node}= | Find | css=VBox | | | # finds node matching the CSS selector |
| ${my node}= | Find | id=id | | | # finds node with matching _id_ |
| ${my node}= | Find | xpath=//Rectangle | | | # finds node matching the XPath |
| ${my node}= | Find | class=javafx.scene.shape.Rectangle | | | # finds node that is instance of the class |
| ${my node}= | Find | pseudo=hover | | | # finds node containing the given pseudo class state |
| ${my node}= | Find | \#id | True | | # this search fails if nothing is found |
| ${my node}= | Find | css=VBox | False | ${root} | # finds node matching the CSS selector from the children of given root |

Or chaining multiple queries together:
| ${my node}= | Find | css=VBox HBox xpath=//Rectangle[@width="600.0"] | 
The example above would first look for a node matching the css selector _VBox HBox_, then continue the search using the found HBox as a root node, while looking for a node matching the XPath.</doc>
<tags>
</tags>
</kw>
<kw name="Find All">
<arguments>
<arg>query</arg>
<arg>failIfNotFound=False</arg>
<arg>root=</arg>
</arguments>
<doc>Returns *all* nodes matching the query. 

``query`` is a query locator, see `3.1 Using queries`.

``failIfNotFound`` specifies if keyword should fail if nothing is found. By default it's false and keyword returns null in case lookup returns nothing.

``root`` is an optional argument pointing to the element which is used as the origin of the lookup. If root is defined only its children can be found. By default nodes are being looked from everywhere.

See keyword `Find` for further examples of query usage.</doc>
<tags>
</tags>
</kw>
<kw name="Find All From Node">
<arguments>
<arg>node</arg>
<arg>query</arg>
<arg>failIfNotFound=False</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find All` instead.

Returns *all* descendant nodes of given node matching the query. 

``node`` is the starting point Object:Node from where to start looking, see `3.2 Using objects`. 

``query`` is a query locator, see `3.1 Using queries`.

``failIfNotFound`` specifies if keyword should fail if nothing is found. By default it's false and keyword returns null in case lookup returns nothing.


Example:
| ${my nodes}= | Find All From Node | ${some node} | .css | 
See keyword `Find` for further examples of query usage.</doc>
<tags>
</tags>
</kw>
<kw name="Find All With Pseudo Class">
<arguments>
<arg>query</arg>
<arg>pseudo</arg>
<arg>failIfNotFound=</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find All` instead.

Returns *all* nodes matching query AND given pseudo-class state. 
``query`` is a query locator, see `3.1 Using queries`.

``pseudo`` is a String value specifying pseudo class value.

``failIfNotFound`` specifies if keyword should fail if nothing is found. By default it's false and keyword returns null in case lookup returns nothing.


Example:
| ${my node}= | Find All With Pseudo Class | .check-box-tree-cell .check-box | selected |</doc>
<tags>
</tags>
</kw>
<kw name="Find Class">
<arguments>
<arg>query</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find` instead.

Returns the *first* node matching the query. 

``query`` is the Class name String to use in lookup.

Example:
| ${my node}= | Find | javafx.scene.control.Button | # button class |</doc>
<tags>
</tags>
</kw>
<kw name="Find From Node">
<arguments>
<arg>node</arg>
<arg>query</arg>
<arg>failIfNotFound=</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find` instead.

Returns the *first* descendant node of given node matching the query. 

``node`` is the starting point Object:Node from where to start looking, see `3.2 Using objects`. 

``query`` is a query locator, see `3.1 Using queries`.

``failIfNotFound`` specifies if keyword should fail if nothing is found. By default it's false and keyword returns null in case lookup returns nothing.


Example:
| ${my node}= | Find From Node | ${some node} | .css |
See keyword `Find` for further examples of query usage.</doc>
<tags>
</tags>
</kw>
<kw name="Find With Path">
<arguments>
<arg>query</arg>
<arg>failIfNotFound=False</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find` instead.

finder that mimics _xpath_ style search.

``query`` is a query locator, see `3.1 Using queries`.

``failIfNotFound`` specifies if keyword should fail if nothing is found. By default it's false and keyword returns null in case lookup returns nothing.


Example:
 | ${node}= | Find With Path | .main-view[0] .split-pane[0] \#node-id class=GridPane .toggle-button[3] sometext |</doc>
<tags>
</tags>
</kw>
<kw name="Get Bounds">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns a Bounds object for a region located using given locator. 

``locator`` is either a _query_ or _Object:Node, Point2D, Scene, or Window_ for identifying the region, see `3. Locating or specifying UI elements`. 


Example:
| ${bounds}= | Get Bounds | ${node} | 
| ${target}= | Create Bounds | 150 | 150 | 200 | 200 | 
| Should Be Equal | ${bounds} | ${target} |</doc>
<tags>
</tags>
</kw>
<kw name="Get Check Box Selection">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the 'Selected' value(true/false) for given checkbox. 

``locator`` is either a _query_ or _Object:Node_ for identifying the CheckBox element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Context Menu Items">
<arguments>
<arg>locator=</arg>
</arguments>
<doc>Returns context menu items as a dictionary containing menu name:node pairs. 

Optional parameter ``locator`` is an _Object:Window_ for specifying which contextMenu(window) items should be collected. Default value is the last window returned by `Get Target Windows` -keyword. 

Examples:
| Click On | \#menu-button-id | 
| ${menu items}= | Get Context Menu Items | 
| Dictionary Should Contain Key | ${menu items} | menu item name| Click On | &amp;{menu items}[menu item name] |</doc>
<tags>
</tags>
</kw>
<kw name="Get Library Version">
<arguments>
</arguments>
<doc>Returns the library version from POM file</doc>
<tags>
</tags>
</kw>
<kw name="Get Node Children By Class Name">
<arguments>
<arg>node</arg>
<arg>className</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find` instead.

Returns *all* descendant nodes of given node matching the given Java class name. 

``locator`` is either a _query_ or _Object_ for node whose children will be queried, see `3.2 Using locators as keyword arguments`. 

``className`` is the Java class name to look for.

Example:
| ${panes}= | Get Node Children By Class Name | ${some node} | BorderPane | 
Returns an empty list if none is found.</doc>
<tags>
</tags>
</kw>
<kw name="Get Node Height">
<arguments>
<arg>locator</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Find` instead.

Returns height value of the node. 

``locator`` is either a _query_ or _Object_ for a node whose getHeight method will be called, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Node Image Url">
<arguments>
<arg>node</arg>
</arguments>
<doc>Returns image name and path of the node. 

``locator`` is either a _query_ or _Object_ for a node whose getHeight method will be called, see `3. Locating or specifying UI elements`. 

Returns full image path by subsequently calling impl_getUrl -method. 

Note, impl_getUrl -method is deprecated! Support for this method will be removed from Java in the future.</doc>
<tags>
</tags>
</kw>
<kw name="Get Node Parent">
<arguments>
<arg>node</arg>
</arguments>
<doc>Returns the parent node of node. 

``locator`` is either a _query_ or _Object_ for a node whose getParent method will be called, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Node Text">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns text value of the Node. 

``locator`` is either a _query_ or _Object_ for a node whose getText method will be called, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Nodes Scene">
<arguments>
<arg>locator</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Get Scene` instead.

Returns given locators Scene object. 

``locator`` is either a _query_ or a _Node_, see `3.2 Using locators as keyword arguments`</doc>
<tags>
</tags>
</kw>
<kw name="Get Object Class Name">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the class name of a given node. 

``locator`` is either a _query_ or _Object_ for a node whose getSimpleName method will be called, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Object Property">
<arguments>
<arg>object</arg>
<arg>fieldName</arg>
</arguments>
<doc>Returns the value of the given field

``object`` is a _Object:Node_ whose property values are to be checked, see `3.2 Using objects`. 

``fieldName`` is a String specifying which field value should be read</doc>
<tags>
</tags>
</kw>
<kw name="Get Primary Screen Bounds">
<arguments>
</arguments>
<doc>Returns the bounds of primary screen.</doc>
<tags>
</tags>
</kw>
<kw name="Get Progress Bar Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the current value for given ProgressBar element. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ToggleButton element, see  `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Pseudo Class States">
<arguments>
<arg>node</arg>
</arguments>
<doc>Calls getPseudoClassStates() -method for a given node and returns a list of values returned by the method.

``locator`` is either a _query_ or _Object_ for node whose pseudo class states will be queried, see `3. Locating or specifying UI elements`. 


Example:
| ${states}= | Get Pseudo Class States | ${node} | 
| Log List | ${states} |</doc>
<tags>
</tags>
</kw>
<kw name="Get Root Node Of">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the root node of given element.

``locator`` is either a _query_ or _Object:Node, Window, Scene_ for identifying the element, see `3. Locating or specifying UI elements`. 


Examples for different kind of locators: 

Window:
| ${window}= | Get Window | title=ClickRobot Test | 
| ${node}= | Get Root Node Of | ${window} | 
Scene:
| ${some scene}= | Get Nodes Scene | ${some node} | 
| ${root} | Get Root Node Of | ${some scene} | 
Node:
| ${some node}= | find | \#some-node-id | 
| ${root} | Get Root Node Of | ${some node} | 
Query:
| ${root} | Get Root Node Of | \#some-node-id |</doc>
<tags>
</tags>
</kw>
<kw name="Get Scene">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns Scene of the given object. 

``locator`` is either a _query_, a _Node_ or a _Window_, see `3.2 Using locators as keyword arguments`</doc>
<tags>
</tags>
</kw>
<kw name="Get Screenshot Directory">
<arguments>
</arguments>
<doc>Gets the screenshot directory for current application</doc>
<tags>
</tags>
</kw>
<kw name="Get Scroll Bar Max Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Gets the max value for a given scrollbar. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ScrollBar element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Scroll Bar Min Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Gets the min value for a given scrollbar. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ScrollBar element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Scroll Bar Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Gets the current value for a given scrollbar 

``locator`` is either a _query_ or _Object:Node_ for identifying the ScrollBar element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Scroll Pane Horizontal Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the horizontal value for given ScrollPane element. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ScrollPane element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Scroll Pane Vertical Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the vertical value for given ScrollPane element. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ScrollPane element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Selected Date Picker Date">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the selected date from given datepicker element

``locator`` is either a _query_ or _Object:Node_ for identifying the DatePicker element, see `3. Locating or specifying UI elements`. 


Example:
| ${date}= | Get Selected Date Picker Date | \#datepicker-id |</doc>
<tags>
</tags>
</kw>
<kw name="Get Selected Radio Button">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the selected RadioButton Node from the same group as given locator points to.

``locator`` is either a _query_ or _Object:Node_ for identifying the RadioButton element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Selected Tab Pane Tab">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the selected TabPane Tab as a dictionary entry in form of 'name : Node' pair.

``locator`` is either a _query_ or _Object:Node_ for identifying the TabPane element, see `3. Locating or specifying UI elements`. 


Example:
| ${tab}= | Get Tab Pane Selected Tab | \#pane-id | 
| Dictionary Should contain Key | ${tab} | tab name |</doc>
<tags>
</tags>
</kw>
<kw name="Get Spinner Value">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns the current value of given spinner element. 
``locator`` is either a _query_ or _Object:Node_ for identifying the Spinner element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get System Property">
<arguments>
<arg>name</arg>
</arguments>
<doc>Returns given system property value.
``name`` is the system property name to fetch. 

Example:
| ${locale}= | Get System Property | locale |</doc>
<tags>
</tags>
</kw>
<kw name="Get Tab Pane Tabs">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns a dictionary containing key:value pairs for each tab name and tab content(Node).

``locator`` is either a _query_ or _Object:Node_ for identifying the TabPane element, see `3. Locating or specifying UI elements`. 


Example:
| ${tabs}= | Get Tab pane Tabs | \#tab-pane-id | 
| Dictionary Should Contain Key | ${tabs} | tab name |</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Cell">
<arguments>
<arg>table</arg>
<arg>row</arg>
<arg>column</arg>
</arguments>
<doc>Returns the Node of cell in the given table location

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`. 

``row`` Integer value for the row

``column`` Integer value for the column</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Cell Value">
<arguments>
<arg>table</arg>
<arg>row</arg>
<arg>column</arg>
</arguments>
<doc>Returns the value of cell in the given location

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`. 

``row`` Integer value for the row

``column`` Integer value for the column</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Column Cells">
<arguments>
<arg>table</arg>
<arg>column</arg>
</arguments>
<doc>Returns a list of *visible* cells(Nodes) of the given table column.

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`. 

``column`` Integer value for the column</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Column Count">
<arguments>
<arg>table</arg>
</arguments>
<doc>Returns the column count of the given table

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Column Values">
<arguments>
<arg>table</arg>
<arg>column</arg>
</arguments>
<doc>Returns list of values of the given table column.

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`. 

``column`` Integer value for the column</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Row Cells">
<arguments>
<arg>table</arg>
<arg>row</arg>
</arguments>
<doc>Returns the given table row cells in a dictionary in form of name:node pairs. 

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`. 

``row`` Integer value for the column
Example:
| ${row cells}= | Get Table Row Cells | \#table-id | ${2} | 
| Dictionary Should Contain Key | ${row cells} | column name | 
| ${cell text}= | Get Node Text | &amp;{row cells}[column name] | # assuming that cell is a node that has a text value |</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Row Values">
<arguments>
<arg>table</arg>
<arg>row</arg>
</arguments>
<doc>Returns the given table row cells in a dictionary in form of name:node pairs. 

``locator`` is either a _query_ or _Object:Node_ for identifying the TableView element, see `3. Locating or specifying UI elements`. 

``row`` Integer value for the column
Example:
| ${row cells}= | Get Table Row Cells | \#table-id | ${2} | 
| Dictionary Should Contain Key | ${row cells} | column name | 
| ${cell text}= | Get Node Text | &amp;{row cells}[column name] | # assuming that cell is a node that has a text value |</doc>
<tags>
</tags>
</kw>
<kw name="Get Target Window">
<arguments>
</arguments>
<doc>Returns the last stored target window


Example: 
| ${window}= | Get Target Window |</doc>
<tags>
</tags>
</kw>
<kw name="Get Window">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Returns window object.

``locator`` is either a _query_ or _Object:Node, Scene_ for identifying the Window. In addition to normal _query_, locator can be a search string for _pattern=_, _title=_ or Integer number. See `3. Locating or specifying UI elements`. 


Examples for different kind of locators: 

Pattern (defaults to title):
| ${window}= | Get Window | My window title | 
| ${window}= | Get Window | title=My window title | 
| ${window}= | Get Window | pattern=W[i-w]{5} Title | 

Index:
| ${window}= | Get Window | 0 | 
| ${window}= | Get Window | ${2} | 

Node:
| ${some_node}= | Find | \#some_id | 
| ${window}= | Get Window | ${some_node} | 

Scene: 
| ${some_scene}= | Get Nodes Scene | ${some_node} | 
| ${window}= | Get Window | ${some_scene} |</doc>
<tags>
</tags>
</kw>
<kw name="Get Window Title">
<arguments>
<arg>window</arg>
</arguments>
<doc>Returns the title of the given window. 

``locator`` is an _Object:Window_ whose getTitle method will be called, see `3.2 Using objects`. This keyword can be coupled with e.g. `List Windows` -keyword.</doc>
<tags>
</tags>
</kw>
<kw name="Images Should Match">
<arguments>
<arg>image1</arg>
<arg>image2</arg>
<arg>percentage=100</arg>
</arguments>
<doc>Fails if images are not similar enough

``image1`` is an _Object:Image_ for the first comparable image.

``image2`` is an _Object:Image_ for the second comparable image.

``percentage`` the percentage of pixels that should match, defaults to 100.

This keyword can be coupled with e.g. `Capture Image` -keyword.</doc>
<tags>
</tags>
</kw>
<kw name="Images Should Not Match">
<arguments>
<arg>image1</arg>
<arg>image2</arg>
<arg>percentage=100</arg>
</arguments>
<doc>Fails if images are too similar

``image1`` is an _Object:Image_ for the first comparable image.

``image2`` is an _Object:Image_ for the second comparable image.

``percentage`` the percentage of pixels that should not match, defaults to 100.

This keyword can be coupled with e.g. `Capture Image` -keyword.</doc>
<tags>
</tags>
</kw>
<kw name="Launch Javafx Application">
<arguments>
<arg>appName</arg>
<arg>*args</arg>
</arguments>
<doc>Launches JavaFX application with the given arguments.

``appName`` is the name of the application to launch. 

``appArgs`` is a list of arguments to be passed for the application. 

Example:
| Launch JavaFX Application | _javafxlibrary.testapps.MenuApp_ |
| Launch JavaFX Application | _TestApplication.jar_ |</doc>
<tags>
</tags>
</kw>
<kw name="Launch Swing Application">
<arguments>
<arg>appName</arg>
<arg>*args</arg>
</arguments>
<doc>Creates a JavaFX wrapper for the given Swing application and launches it. This allows testing Swing embedded JavaFX components. Custom wrappers can be used with Launch Javafx Application keyword, see [https://github.com/eficode/JavaFXLibrary/blob/master/src/main/java/javafxlibrary/testapps/SwingApplicationWrapper.java|SwingApplicationWrapper.java] for example.

``appName`` is the name of the application to launch. 

``appArgs`` is a list of arguments to be passed for the application. 

Example:
| Launch Swing Application | _javafxlibrary.testapps.SwingApplication |
| Launch Swing Application | _TestApplication.jar_ |</doc>
<tags>
</tags>
</kw>
<kw name="Launch Swing Application In Separate Thread">
<arguments>
<arg>appName</arg>
<arg>*args</arg>
</arguments>
<doc>Creates a wrapper application the same way as in `Launch Swing Application`, but starts it in a new thread. This is required when main method of the test application is blocked and execution does not return after calling it until the application gets closed. Be sure to set the library timeout with `Set Timeout` so that the test application will have enough time to load, as the test execution will continue instantly after calling the main method.

``appName`` is the name of the application to launch. 

``appArgs`` is a list of arguments to be passed for the application. 

Example:
| Launch Swing Application In Separate Thread | _javafxlibrary.testapps.SwingApplication |
| Launch Swing Application In Separate Thread | _TestApplication.jar_ |</doc>
<tags>
</tags>
</kw>
<kw name="List Node Methods">
<arguments>
<arg>node</arg>
</arguments>
<doc>Lists methods available for given node.
``node`` is the Object:Node which methods to list, see `3.2 Using objects`. 

When working with custom components you may use this keyword to discover methods you can call with `Call Method` keyword.

Example:
| List Component Methods | ${my node} |</doc>
<tags>
</tags>
</kw>
<kw name="List Target Windows">
<arguments>
</arguments>
<doc>Returns a list of windows that are ordered by proximity to the last target window.</doc>
<tags>
</tags>
</kw>
<kw name="List Windows">
<arguments>
</arguments>
<doc>Returns a list of all available windows currently open. 

 
Example:
| ${windows}= | List Windows | 
| Log List | ${windows} |</doc>
<tags>
</tags>
</kw>
<kw name="Load Image">
<arguments>
<arg>path</arg>
</arguments>
<doc>Loads an image from the given _path_ in hard drive 

``path`` is the source path for image in local hard drive. 


Example:
| ${image}= | Load Image | ${path to image}node.png |</doc>
<tags>
</tags>
</kw>
<kw name="Load Image From Url">
<arguments>
<arg>url</arg>
</arguments>
<doc>Loads an image from the given _url_

``url`` is the url for the source image. 


Example:
| ${path}= | Set Variable | http://i.imgur.com | 
| ${image}= | Load Image From Url | ${path}/A99VNbK.png |</doc>
<tags>
</tags>
</kw>
<kw name="Log Application Classpath">
<arguments>
</arguments>
<doc>Logs current classpath content</doc>
<tags>
</tags>
</kw>
<kw name="Log FXML">
<arguments>
<arg>root=</arg>
</arguments>
<doc>Generates and prints FXML representation of the application starting from a given node.

Optional argument ``root`` is the starting point from where to start listing child nodes, see `3.2 Using locators as keyword arguments`. Defaults to root node of current window. 


Example:
| ${my node}= | Find | \#node-id | 
| Log FXML | ${my node} |</doc>
<tags>
</tags>
</kw>
<kw name="Log System Properties">
<arguments>
</arguments>
<doc>Prints all system properties that has been set with *Set System Property* -keyword</doc>
<tags>
</tags>
</kw>
<kw name="Move By">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Moves mouse directly from current location to new location specified by _x_ and _y_ offsets

``x`` is an integer value for horizontal axis x-offset. 

``y`` is an integer value for vertical axis y-offset. 

Optional argument ``motion`` defines the path for mouse to move to given coordinates. Default value is _DIRECT_. 


Example: 
| Move By | 75 | 75 |</doc>
<tags>
</tags>
</kw>
<kw name="Move To">
<arguments>
<arg>locator</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Moves mouse over a node located using given locator.

 ``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

``motion`` defines the path for mouse to move to a target location. Default value is _DIRECT_. 


Example: 
| ${x} | Evaluate | ${400} + ${SCENE_MINX} | 
| ${y} | Evaluate | ${150} + ${SCENE_MINY} | 
| ${point} | Create Point | ${x} | ${y} | 
| Move To | ${POINT} | VERTICAL_FIRST | | # moves mouse on top of given Point object by moving first vertically and then horizontally |</doc>
<tags>
</tags>
</kw>
<kw name="Move To Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Moves mouse to given coordinates.

``x`` is an integer value for horizontal axis x-coordinate. 

``y`` is an integer value for vertical axis y-coordinate. 

Optional argument ``motion`` defines the path for mouse to move to given coordinates. Default value is _DIRECT_. 


Example: 
| ${x} | Evaluate | ${SCENE_MINX} + ${200} | 
 | ${y} | Evaluate | ${SCENE_MINY} + ${200} | 
 | Move To Coordinates | ${x} | ${y} | HORIZONTAL_FIRST | 
| Label Text Should Be | \#locationLabel | 200 | 200 |</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Be Disabled">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is disabled. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Be Enabled">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is enabled. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Be Focused">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is focused. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Be Hoverable">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is hoverable with mouse. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Be Invisible">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is invisible. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Be Visible">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is visible. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Have Text">
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
<doc>Verifies that given node has text. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`. 

``text`` is the String to be searched for</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Not Be Focused">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that node is not focused. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Node Should Not Have Text">
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
<doc>Verifies that given node has not text. 

``locator`` is either a _query_ or _Object:Node_ for identifying the Node, see `3. Locating or specifying UI elements`. 

``text`` is the String to be searched for</doc>
<tags>
</tags>
</kw>
<kw name="Point To">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Sets the current position pointer to a point located using given locator and returns a PointQuery object for it. 

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 


Example: 
| ${point query}= | Point To | ${node} |
| Move To | ${point query} | 
| ${point query position}= | Call Method | ${point query} | getPosition | 
| Set Target Position | BOTTOM_RIGHT | 
| ${point query}= | Point To | ${some node} | 
| Move To | ${point query} | | | # moves to bottom right corner of a node that was stored in PointQuery object. |</doc>
<tags>
</tags>
</kw>
<kw name="Point To Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
</arguments>
<doc>Sets the current position pointer to new location based on x,y coordinates and returns a PointQuery object for it.

``x`` and ``y`` defines the Integer values for the x- and y -coordinates.


Example: 
| ${point query}= | Point To Coordinates | 100 | 200 |</doc>
<tags>
</tags>
</kw>
<kw name="Point To With Offset">
<arguments>
<arg>locator</arg>
<arg>offsetX</arg>
<arg>offsetY</arg>
</arguments>
<doc>Convenience method: Creates and returns a PointQuery pointing to the target with the given offset values. 

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

Parameters ``offsetX`` and ``offsetY`` are Double type values for x- and y-axis offsets.
 
Example: 
| ${point query}= | Point To With Offset | ${some node} | 10.0 | -10.0 | 
| ${point query offset}= | Call Method | ${point query} | getOffset |</doc>
<tags>
</tags>
</kw>
<kw name="Press">
<arguments>
<arg>*keys</arg>
</arguments>
<doc>Presses given keys, until explicitly released via keyword 'Release'. Once pressed, 

``keys`` is the list of keys to be pressed, see a list of different KeyCodes in `5. Used ENUMs`. 


Example: 
| Press | CONTROL | SHIFT | G |</doc>
<tags>
</tags>
</kw>
<kw name="Press Mouse Button">
<arguments>
<arg>*buttons</arg>
</arguments>
<doc>Presses and holds mouse buttons.

``buttons`` is a list of mouse buttons to press. Defaults to _PRIMARY_, see `5. Used ENUMs` for different mouse buttons. 
Example: 
| Press Mouse Button | PRIMARY |</doc>
<tags>
</tags>
</kw>
<kw name="Print Child Nodes">
<arguments>
<arg>root=</arg>
</arguments>
<doc>Prints all child nodes starting from a given node.

Optional argument ``root`` is the starting point from where to start listing child nodes, see `3.2 Using locators as keyword arguments`. Defaults to root node of current window. 


Example:
| ${my node}= | Find | \#node-id | 
| Print Child Nodes | ${my node} |</doc>
<tags>
</tags>
</kw>
<kw name="Print Object Properties">
<arguments>
<arg>object</arg>
</arguments>
<doc>Prints a list of all fields and their values of the given Java object

``object`` is a _Object:Node_ whose property field values will be printed, see `3.2 Using objects`.</doc>
<tags>
</tags>
</kw>
<kw name="Push">
<arguments>
<arg>*keys</arg>
</arguments>
<doc>Pushes a given key/key combination.

``keys`` is the list of keys to be pushed, see a list of different KeyCodes in `5. Used ENUMs`. 


Example:
| Push | CONTROL | SHIFT | G |</doc>
<tags>
</tags>
</kw>
<kw name="Push In Order">
<arguments>
<arg>*keys</arg>
</arguments>
<doc>Pushes given keys one at a time.

``keys`` is the list of keys to be pushed, see a list of different KeyCodes in `5. Used ENUMs`. 


Example:
| Push In Order | H | e | l | l | o | 
| Push In Order | BACK_SPACE | LEFT | BACK_SPACE |</doc>
<tags>
</tags>
</kw>
<kw name="Push Many Times">
<arguments>
<arg>times</arg>
<arg>*keys</arg>
</arguments>
<doc>Pushes a given key/key combination multiple times.

``times`` defines how many times to push
``keys`` is the key combination to push, see a list of different KeyCodes in `5. Used ENUMs`. 


Example:
| Push Many Times | 2 | LEFT | 
| Push Many Times | 5 | SHIFT | X |</doc>
<tags>
</tags>
</kw>
<kw name="Radio Button Should Be Selected">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that RadioButton is selected. 

``locator`` is either a _query_ or _Object:Node_ for identifying the RadioButton element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Radio Button Should Not Be Selected">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that RadioButton is not selected. 

``locator`` is either a _query_ or _Object:Node_ for identifying the RadioButton element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Release">
<arguments>
<arg>*keys</arg>
</arguments>
<doc>Releases given keys. 

``keys`` is the list of keys to be released, see a list of different KeyCodes in `5. Used ENUMs`. 


Example: 
| Release | CONTROL | SHIFT | G | 
Note: passing in an empty list will release all pressed keys.</doc>
<tags>
</tags>
</kw>
<kw name="Release Mouse Button">
<arguments>
<arg>*buttons</arg>
</arguments>
<doc>Releases pressed mouse buttons.

``buttons`` is a list of mouse buttons to release. Defaults to _PRIMARY_, see `5. Used ENUMs` for different mouse buttons. 
Example: 
| Release Mouse Button | SECONDARY |</doc>
<tags>
</tags>
</kw>
<kw name="Right Click On">
<arguments>
<arg>locator</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Right clicks an element specified by given locator.

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

``motion`` defines the path for mouse to move to a target location. Default value is _DIRECT_. Especially with submenus, desired motion is usually HORIZONTAL_FIRST.</doc>
<tags>
</tags>
</kw>
<kw name="Right Click On Coordinates">
<arguments>
<arg>x</arg>
<arg>y</arg>
<arg>motion=DIRECT</arg>
</arguments>
<doc>Moves mouse directly to the given coordinates and right clicks the primary mouse button

``x`` and ``y`` defines the coordinates as integer values. 

Optional argument ``motion`` defines how mouse pointer is moved to target. Defaults to _DIRECT_.</doc>
<tags>
</tags>
</kw>
<kw name="Right Click On Mouse Button">
<arguments>
</arguments>
<doc>Clicks right mouse button on whatever is under the mouse pointer</doc>
<tags>
</tags>
</kw>
<kw name="Save Image As">
<arguments>
<arg>image</arg>
<arg>path</arg>
</arguments>
<doc>Saves given image to given location

``image`` is the target _Object:Image_ to be saved
``path`` is the target location where image will be saved</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Horizontally">
<arguments>
<arg>direction</arg>
<arg>amount=1</arg>
</arguments>
<doc>Scrolls horizontally by amount (in terms of ticks of a mouse wheel) in given direction.

``amount`` is the number of scroll ticks, defaults to 1. 

``direction`` specifies whether to scroll RIGHT or LEFT. 


Example:
| Move To | ${some node} | 
| Scroll Horizontally | RIGHT |</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Vertically">
<arguments>
<arg>direction</arg>
<arg>amount=1</arg>
</arguments>
<doc>Scrolls vertically by amount (in terms of ticks of a mouse wheel) in given direction.

``amount`` is the number of scroll ticks, defaults to 1. 

``direction`` specifies whether to scroll UP or DOWN. 


Example:
| Move To | ${some node} | 
| Scroll Vertically | DOWN | 25 |</doc>
<tags>
</tags>
</kw>
<kw name="Select All">
<arguments>
</arguments>
<doc>Pushes CTRL/CMD + A key combination to select all.</doc>
<tags>
</tags>
</kw>
<kw name="Select Context Menu Item">
<arguments>
<arg>item</arg>
</arguments>
<doc>Clicks the given item from menu

``item`` is the name for the Context Menu item to be clicked. This keyword clicks the first menu item that matches the given item name. Search of an item is started from the last target window.

Example:
| Click On | \#menu-button-id | 
| Select Context Menu Item | menu item name |</doc>
<tags>
</tags>
</kw>
<kw name="Select Tab Pane Tab">
<arguments>
<arg>locator</arg>
<arg>tabName</arg>
</arguments>
<doc>Selects the given Tab from TabPane``locator`` is either a _query_ or _Object:Node_ for identifying the TabPane element, see `3. Locating or specifying UI elements`. 

``tabName`` is the name of the tab to be selected

Examples:
| Select Tab Pane Tab | ${Tab Pane} | tab name | 
| Select Tab Pane Tab | \#tab-id | tab name |</doc>
<tags>
</tags>
</kw>
<kw name="Set Image Logging">
<arguments>
<arg>value</arg>
</arguments>
<doc>Sets whether to embed log images directly into the log.html file or as a link to a file on local disk.

Argument ``value`` is a string. Accepted values are ``embedded`` (initial value) and ``diskonly``. They can be given in uppercase as well. 


Example:
| Set Image Logging | DISKONLY |</doc>
<tags>
</tags>
</kw>
<kw name="Set Safe Clicking">
<arguments>
<arg>value</arg>
</arguments>
<doc>Enables/Disables clicking outside of visible JavaFX application windows. Safe clicking is on by default, preventing clicks outside of the tested application.

``value`` can be any of the following: ON, on, OFF, off.

Parameter _value_ specifies whether safety should be toggled on or off</doc>
<tags>
</tags>
</kw>
<kw name="Set Screenshot Directory">
<arguments>
<arg>directory</arg>
</arguments>
<doc>Sets the screenshot directory for current application

``directory`` is a path to a folder which is to be set as current screenshot directory</doc>
<tags>
</tags>
</kw>
<kw name="Set System Property">
<arguments>
<arg>name</arg>
<arg>value</arg>
</arguments>
<doc>Sets system property ``name`` to ``value``. Equals commmand line usage `-Dname=value`.

Example:
| Set System Property | locale | en_US |</doc>
<tags>
</tags>
</kw>
<kw name="Set Target Position">
<arguments>
<arg>pointPosition</arg>
</arguments>
<doc>Stores the given position as the default offset for all point operations.

``pointPosition`` sets the default offset for every use of `Point To` -keyword. Defaults to _CENTER_, see more at `5. Used ENUMs` and _Pos_ enum. 


Example: 
| Set Target Position | TOP_LEFT |</doc>
<tags>
</tags>
</kw>
<kw name="Set Target Window">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Sets active target window

``locator`` is either a _query_ or _Object:Node, Scene_ for identifying the Window. In addition to normal _query_, locator can be a search string for _pattern=_, _title=_ or Integer number. See `3. Locating or specifying UI elements`. 


Examples for different kind of locators: 

pattern (defaults to title):
| Set Target Window | My window title | 
| Set Target Window | title=My window title | 
| Set Target Window | pattern=W[i-w]{5} Title | 

Index:
| Set Target Window | 0 | 
| Set Target Window | ${2} | 

Node:
| ${some_node}= | Find | \#some_id | 
| Set Target Window | ${some_node} | 

Scene: 
| ${some_scene}= | Get Nodes Scene | ${some_node} | 
| Set Target Window | ${some_scene} |</doc>
<tags>
</tags>
</kw>
<kw name="Set Timeout">
<arguments>
<arg>timeout</arg>
</arguments>
<doc>Sets the time waited for nodes to become available. Default value is 5 seconds.``timeout`` is an Integer value for timeout.</doc>
<tags>
</tags>
</kw>
<kw name="Set To Classpath">
<arguments>
<arg>path</arg>
</arguments>
<doc>Loads given path to classpath.

``path`` is the path to add.

If directory path has asterisk(*) after directory separator all jar files are added from directory.

Example:
| Set To Classpath | C:${/}users${/}my${/}test${/}folder | 
| Set To Classpath | C:${/}users${/}my${/}test${/}folder${/}* |</doc>
<tags>
</tags>
</kw>
<kw name="Set Write Speed">
<arguments>
<arg>milliseconds</arg>
</arguments>
<doc>Sets the time waited between every character when typing

``milliseconds`` is the time waited between each character in milliseconds.</doc>
<tags>
</tags>
</kw>
<kw name="Stop Remote Server">
<arguments>
</arguments>
<doc>Stops the remote server.

The server may be configured so that users cannot stop it.</doc>
<tags>
</tags>
</kw>
<kw name="Switch Window">
<arguments>
<arg>switchAmount</arg>
</arguments>
<doc>Presses ALT/CMD + TAB for the given amount of times. 

``switchAmount`` is an Integer value and specifies how many switches will be made in total</doc>
<tags>
</tags>
</kw>
<kw name="Toggle Button Should Be Selected">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that ToggleButton is selected. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ToggleButton element, see `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Toggle Button Should Not Be Selected">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Verifies that ToggleButton is not selected. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ToggleButton element, see  `3. Locating or specifying UI elements`.</doc>
<tags>
</tags>
</kw>
<kw name="Wait For Events In Fx Application Thread">
<arguments>
<arg>timeout=</arg>
</arguments>
<doc>Waits for current events in Fx Application Thread event queue to finish before continuing.

``timeout`` is the maximum time in seconds that the events will be waited for. If the timeout is exceeded the keyword will fail. Default timeout is 5 seconds.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Element Exists">
<arguments>
<arg>locator</arg>
<arg>timeout=10</arg>
<arg>timeUnit=SECONDS</arg>
</arguments>
<doc>Waits until given element can be found.

``locator`` is either a _query_ or _Object:Node_ for identifying the element, see `3. Locating or specifying UI elements`. 

``timeout`` is the maximum waiting time value, defaults to 10 

``timeUnit`` is the time unit to be used, defaults to SECONDS, see `5. Used ENUMs` for more options for _timeUnit_. 


Example:
| Wait Until Element Exists | \#some-node-id | 
| Wait Until Element Exists | \#some-node-id | 200 | MILLISECONDS |</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Node Is Enabled">
<arguments>
<arg>locator</arg>
<arg>timeout=5</arg>
</arguments>
<doc>Waits until a node located using given locator becomes enabled. 

``locator`` is either a _query_ or _Object:Node_ for identifying the element, see `3. Locating or specifying UI elements`. 

``timeout`` is the maximum waiting time in seconds, defaults to 5.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Node Is Visible">
<arguments>
<arg>locator</arg>
<arg>timeout=5</arg>
</arguments>
<doc>Waits until a node located by given locator becomes visible. 

``locator`` is either a _query_ or _Object:Node_ for identifying the element, see `3. Locating or specifying UI elements`. 

``timeout`` is the maximum waiting time in seconds, defaults to 5.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Progress Bar Is Finished">
<arguments>
<arg>locator</arg>
<arg>timeout=20</arg>
</arguments>
<doc>Waits until given ProgressBar is finished or timeout expires. 

``locator`` is either a _query_ or _Object:Node_ for identifying the ToggleButton element, see  `3. Locating or specifying UI elements`. 

``timeout`` is an integer value for timeout in seconds, defaults to 20 seconds.</doc>
<tags>
</tags>
</kw>
<kw name="Window Should Be Focused">
<arguments>
<arg>window</arg>
</arguments>
<doc>Verifies that given window is focused. 

``window`` is the _Object:Window_ that specifies which window should be focused, see `3.2 Using objects`</doc>
<tags>
</tags>
</kw>
<kw name="Window Should Be Showing">
<arguments>
<arg>window</arg>
</arguments>
<doc>Verifies that given window is showing. 

``window`` is the _Object:Window_ that specifies which window should be showing, see `3.2 Using objects`</doc>
<tags>
</tags>
</kw>
<kw name="Write">
<arguments>
<arg>text</arg>
</arguments>
<doc>Writes a given text characters one after the other.

``text`` is the text characters to write

Example: 
| Write | Robot Framework |</doc>
<tags>
</tags>
</kw>
<kw name="Write Fast">
<arguments>
<arg>text</arg>
</arguments>
<doc>Writes a given text to system clipboard and pastes the content to active element.

``text`` is the text characters to write

Example: 
| Write Fast | Robot Framework |</doc>
<tags>
</tags>
</kw>
<kw name="Write To">
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
<doc>Writes a given text characters one after the other to given locator.

``locator`` is either a _query_ or _Object:Bounds, Node, Point2D, PointQuery, Scene, Window_ for identifying the element, see `3. Locating or specifying UI elements`. 

``text`` is the text characters to write

Example: 
| Write To | .css-name | Robot Framework |</doc>
<tags>
</tags>
</kw>
</keywordspec>
